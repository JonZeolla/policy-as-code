---
# https://taskfile.dev

version: '3'

set:
  - nounset
  - errexit
  - pipefail

vars:
  IMAGE_NAME: jonzeolla/labs
  REPO_NAME:
    sh: echo "$(basename "$(git rev-parse --show-toplevel)")"
  IMAGE_AND_TAG_BASE:
    sh: echo "{{.IMAGE_NAME}}:{{.REPO_NAME}}"
  PYTHON_VERSION: 3.12
  SUPPORTED_PLATFORMS: 'linux/amd64,linux/arm64'
  VERSION:
    sh: cat '{{.ROOT_DIR}}/VERSION'
  LOCAL_PLATFORM:
    # Inspired by https://github.com/containerd/containerd/blob/e0912c068b131b33798ae45fd447a1624a6faf0a/platforms/database.go#L76
    sh: |
      os="linux"
      arch="$(uname -m)"

      case ${arch} in
        # AMD64
        x86_64)  echo "${os}/amd64" ;;
        amd64)   echo "${os}/amd64" ;;

        # ARM64 special case due to https://hub.docker.com/_/python platforms
        aarch64) echo "${os}/arm64" ;;
        arm64)   echo "${os}/arm64" ;;
      esac

silent: true

tasks:
  init-pipenv:
    desc: Initializes the pipenv virtual environment if Pipfile.lock changes
    internal: true
    sources:
      - Pipfile.lock
    preconditions:
      - which pipenv || python -m pip install --upgrade pipenv
    cmds:
      - pipenv install --deploy --ignore-pipfile --dev

  init-submodules:
    desc: >
      Initializes git submodules; paved road projects include the Seiso goat üêê
      for its shared configs, etc.
    internal: true
    status:
      # Only update submodules if you are in a git repository; quote to avoid yaml intrepretering the ! as a node tag
      # https://yaml.org/spec/1.2.2/#691-node-tags
      - '! test -d .git'
    cmds:
      - git submodule update --init

  init-install-tools:
    desc: Install required tools
    internal: true
    cmds:
      - task: mac-brew-install
        vars:
          TOOLS: syft,grype
      - task: runner-curl-install
        vars:
          INSTALL_URL: https://raw.githubusercontent.com/anchore/syft/main/install.sh
          TOOL: syft
      - task: runner-curl-install
        vars:
          INSTALL_URL: https://raw.githubusercontent.com/anchore/grype/main/install.sh
          TOOL: grype

  init:
    desc: Initialize the repo for local use; intended to be run after git clone
    cmds:
      - task: init-pipenv
      - task: init-submodules
      - task: init-install-tools

  lock:
    desc: Generate a Pipfile.lock if Pipfile changed from last run
    sources:
      - Pipfile
    generates:
      - Pipfile.lock
    cmds:
      - pipenv lock

  runner-curl-install:
    desc: Install something on a GitHub Actions runner via curl
    internal: true
    status:
      - '{{if eq .GITHUB_ACTIONS "true"}}exit 1{{end}}'
    preconditions:
      - test -d "${RUNNER_TEMP}/bin" || mkdir "${RUNNER_TEMP}/bin"
      - |
        case ${GITHUB_PATH} in
          *${RUNNER_TEMP}/bin*) exit 0 ;;
          *) echo "${RUNNER_TEMP}/bin" >> "${GITHUB_PATH}" ;;
        esac
    requires:
      vars:
        - INSTALL_URL
        - TOOL
    platforms: [linux]
    cmds:
      - curl -sSfL {{.INSTALL_URL}} | sh -s -- -b "${RUNNER_TEMP}/bin"
      - chmod +x "${RUNNER_TEMP}/bin/{{.TOOL}}"

  mac-brew-install:
    desc: Install something on a mac via brew
    internal: true
    platforms: [darwin]
    requires:
      vars: [TOOLS]
    cmds:
      - for:
          var: TOOLS
          split: ','
          as: tool
        cmd: brew install {{.tool}}

  lint:
    desc: Run the linter(s); paved road projects use the Seiso goat üêê
    platforms: [linux, darwin]
    vars:
      INPUT_AUTO_FIX: '{{.INPUT_AUTO_FIX | default ""}}'
      INPUT_DISABLE_MYPY: '{{.INPUT_DISABLE_MYPY | default ""}}'
      INPUT_EXCLUDE: '{{.INPUT_EXCLUDE | default "Taskfile.yml"}}'
      INPUT_LOG_LEVEL: '{{.INPUT_LOG_LEVEL | default ""}}'
    preconditions:
      - sh: |
          docker pull seiso/goat:latest || \
            echo "Failed to pull the goat, continuing anyway..."
    cmds:
      - |
        docker run --env INPUT_AUTO_FIX="{{.INPUT_AUTO_FIX}}" \
                   --env INPUT_DISABLE_MYPY="{{.INPUT_DISABLE_MYPY}}" \
                   --env INPUT_EXCLUDE="{{.INPUT_EXCLUDE}}" \
                   --env INPUT_LOG_LEVEL="{{.INPUT_LOG_LEVEL}}" \
                   --rm -v "{{.ROOT_DIR}}:/goat" seiso/goat:latest

  build:
    desc: Build the project; docker images, compiled binaries, etc.
    platforms: [linux, darwin]
    requires:
      vars: ['VERSION']
    vars:
      VERSION: '{{.VERSION}}'
      PLATFORM: '{{if eq .PLATFORM "all"}}{{.SUPPORTED_PLATFORMS}}{{else if .PLATFORM}}{{.PLATFORM}}{{else}}{{.LOCAL_PLATFORM}}{{end}}'
      PUBLISH: '{{.PUBLISH | default "false"}}'
      TAG_COMMIT_HASH:
        sh: git rev-list -1 "v{{.VERSION}}"
      COMMIT_HASH:
        sh: git rev-parse HEAD
      COMMIT_HASH_SHORT:
        sh: git rev-parse --short HEAD
      REPO_TAGS:
        sh: git tag -l
      BUILD_VERSION:
        sh: |
          pipenv run python -c '
          version_string = "v{{.VERSION}}"
          repo_tags = []
          {{range $tag := .REPO_TAGS | splitLines -}}
          repo_tags.append("{{$tag}}")
          {{end}}
          if (
              version_string in repo_tags
              and "{{.TAG_COMMIT_HASH}}" == "{{.COMMIT_HASH}}"
          ):
              build_version = "{{.VERSION}}"
          else:
              build_version = f"{{.VERSION}}-{{.COMMIT_HASH_SHORT}}"
          print(build_version)'
      IMAGE_AND_TAG: '{{.IMAGE_AND_TAG_BASE}}-{{.BUILD_VERSION}}'
      OUTPUT_FILE: '{{.IMAGE_AND_TAG | replace "/" "_" | replace "-" "_" | replace ":" "_"}}_{{.PLATFORM | replace "/" "_" | replace "," "_"}}.tar'
      DOCKER_BUILDX_FINAL_ARGS: '{{if .DOCKER_BUILDX_CUSTOM_ARGS}}{{.DOCKER_BUILDX_CUSTOM_ARGS}}{{else}}{{end}}'
      DOCKER_BUILDX_FINAL_CONTEXT: '{{.DOCKER_BUILDX_CUSTOM_CONTEXT | default "."}}'
      DOCKER_BUILDX_FINAL_TAGS: '{{if .DOCKER_BUILDX_CUSTOM_TAGS}}{{.DOCKER_BUILDX_CUSTOM_TAGS}}{{else}}--tag "{{.IMAGE_AND_TAG_BASE}}" --tag "{{.IMAGE_AND_TAG}}"{{end}}'
      DOCKER_BUILDX_FINAL_BUILDARGS: '{{if .DOCKER_BUILDX_CUSTOM_BUILDARGS}}{{.DOCKER_BUILDX_CUSTOM_BUILDARGS}}{{else}}--build-arg VERSION="{{.BUILD_VERSION}}" --build-arg COMMIT_HASH="{{.COMMIT_HASH}}"{{end}}'
    cmds:
      - task: pipeline-docker-multiplatform-init
      # We only load when the provided platform equals the detected local platform. This is for two reasons:
      # 1. We assume you don't want to load a cross-platform build
      # 2. Currently (2023-07-30) you cannot --load if you are building multiple platforms
      #
      # Also, we make load and push mutually exclusive because docker says "ERROR: push and load may not be set together at the moment"
      #
      # If we aren't loading or pushing, we dump an OCI-formatted artifact out to disk
      #
      # We leverage `docker buildx build` with `--push` to make a multi-platform manifest when {{.PUBLISH}} is true. Otherwise we'd need to push per-platform
      # tags and artisanally craft the multi-platform manifest with a tool like `crane`, `docker manifest`, or similar
      - |
        docker buildx build --platform="{{.PLATFORM}}" \
          {{if eq .PUBLISH "true"}}--push{{else if eq .PLATFORM .LOCAL_PLATFORM}}--load{{else}}-o type=oci,dest="{{.OUTPUT_FILE}}"{{end}} \
          {{.DOCKER_BUILDX_FINAL_ARGS}} \
          {{.DOCKER_BUILDX_FINAL_TAGS}} \
          {{.DOCKER_BUILDX_FINAL_BUILDARGS}} \
          "{{.DOCKER_BUILDX_FINAL_CONTEXT}}"
      - '{{if ne .PLATFORM .LOCAL_PLATFORM}}{{if ne .PUBLISH "true"}}echo "WARNING: Avoided loading {{.IMAGE_AND_TAG_BASE}} and {{.IMAGE_AND_TAG}} into your docker daemon because you built a cross-platform image of {{.PLATFORM}}.{{if ne .PUBLISH "true"}} See {{.OUTPUT_FILE}} for the OCI artifact.{{end}}"{{end}}{{end}}'

  test:
    desc: Run the project tests
    env:
      INPUT_DISABLE_MYPY: '{{.INPUT_DISABLE_MYPY}}'
      INPUT_EXCLUDE: '{{.INPUT_EXCLUDE}}'
      INPUT_LOG_LEVEL: "{{.CLI_ARGS}}"
    vars:
      PLATFORM: '{{if eq .PLATFORM "all"}}{{.SUPPORTED_PLATFORMS}}{{else if .PLATFORM}}{{.PLATFORM}}{{else}}{{.LOCAL_PLATFORM}}{{end}}'
    # If a cross-platform image is provided via in the PLATFORM var, exit 1 here which bypasses tests
    status:
      - '{{if eq .PLATFORM .LOCAL_PLATFORM}}exit 1{{end}}'
    cmds:
      - 'docker run {{.IMAGE_AND_TAG_BASE}} ansible-playbook --version'

  clean:
    desc: Clean up build artifacts, cache files/directories, temp files, etc.
    cmds:
      - find {{.ROOT_DIR}} -type f -name '.DS_Store' -delete
      - find {{.ROOT_DIR}} -type f -name '.Thumbs.db' -delete
      - find {{.ROOT_DIR}} -type d -name '__pycache__' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.mypy_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.pytest_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name '*.pyc' -delete
      - find {{.ROOT_DIR}} -type d -name '.ruff_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.task' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name 'sbom.*.json' -delete
      - find {{.ROOT_DIR}} -type f -name 'vulns.*.json' -delete
      - find {{.ROOT_DIR}} -type f -name 'jonzeolla_*_*.tar' -delete

  release:
    desc: Cut a project release
    # This is a relative path which should place us back into the calling repo, assuming this is called from a goat/Task/*/Taskfile.yml.
    requires:
      vars: ['PYTHON_VERSION']
    vars:
      PYTHON_VERSION: '{{.PYTHON_VERSION}}'
      RELEASE_TYPE: "{{.CLI_ARGS}}"
      DATE_INFO: '{{now | date "2006.01"}}'
      REPO_TAGS:
        sh: git tag -l
      VERSIONING:
        sh: grep versioning setup.cfg | cut -d '"' -f 2
      RELEASE_VERSION:
        sh: |
          docker run --rm \
                     -v "${PWD}:/usr/src/app" \
                     -w /usr/src/app \
                     python:{{.PYTHON_VERSION}}-slim \
                     python -c '
          import re
          pattern = re.compile(r"v2[0-1][0-9]{2}.(0[0-9]|1[0-2]).[0-9]{2}")
          repo_tags = []
          {{range $tag := .REPO_TAGS | splitLines -}}
          repo_tags.append("{{$tag}}")
          {{end}}
          for tag in reversed(repo_tags):
              if pattern.fullmatch(tag):
                  latest_release = tag
                  break
              else:
                  latest_release = None
          if latest_release and "{{.DATE_INFO}}" == latest_release[1:8]:
              increment = str(int(latest_release[9:]) + 1).zfill(2)
          else:
              increment = "01"
          new_version = f"{{.DATE_INFO}}.{increment}"
          print(new_version)'
    preconditions:
      - sh: test `git status -s | wc -w` = "0"
        msg: "There are untracked files, please commit before creating a release."
    cmds:
      - task: pipeline-git-init
      # Better conditional syntax is pending https://github.com/go-task/task/issues/608
      - >
        {{if eq .VERSIONING "CalVer"}}
          pipenv run bumpversion --config-file setup.cfg --new-version {{.RELEASE_VERSION}} unusedpart
        {{else if eq .VERSIONING "SemVer"}}
          pipenv run bumpversion --config-file setup.cfg {{.RELEASE_TYPE}}
        {{else}}
          echo "Invalid VERSIONING var"; exit 1
        {{end}}

  publish:
    desc: Publish the project artifacts; docker images, compiled binaries, etc.
    requires:
      vars: ['VERSION']
    cmds:
      - task: build
        vars:
          PUBLISH: 'true'
          VERSION: '{{.VERSION}}'
          PLATFORM: '{{.PLATFORM | default .LOCAL_PLATFORM}}'
          DOCKER_BUILDX_CUSTOM_ARGS: '{{.DOCKER_BUILDX_CUSTOM_ARGS}}'
          DOCKER_BUILDX_CUSTOM_TAGS: '{{.DOCKER_BUILDX_CUSTOM_TAGS}}'
          DOCKER_BUILDX_CUSTOM_CONTEXT: '{{.DOCKER_BUILDX_CUSTOM_CONTEXT}}'

  update:
    desc: Update the project dev and runtime dependencies, and other misc components
    # This is a relative path which should place us back into the calling repo, assuming this is called from a goat/Task/*/Taskfile.yml.
    cmds:
      - task: lock
      - git submodule update --remote
      - >
        docker run --rm -v "${PWD}:/usr/src/app" -w /usr/src/app python:{{.PYTHON_VERSION}}-slim /bin/bash
        -c "python3 -m pip install --upgrade pipenv &>/dev/null && pipenv update"

  update-demo-repos:
    desc: Update the demo repos
    cmds:
      - "pipenv run ./hack/update-demo-repo.py --config=lab-resources/hack/update-demo-repos.yml --force-push"

  pipeline-git-init:
    desc: Initialize git configs in the pipeline
    status:
      - '{{if eq .GITHUB_ACTIONS "true"}}exit 1{{end}}'
    cmds:
      - git config --global user.name "Automation"
      - git config --global user.email "automation@jonzeolla.com"
      - git config --global credential.helper '!f() { sleep 1 && echo "username=${GITHUB_USER}" && echo "password=${GITHUB_PAT}"; }; f'

  pipeline-docker-multiplatform-init:
    desc: Setup docker in a GitHub Actions pipeline for multiplatform builds
    status:
      - '{{if eq .GITHUB_ACTIONS "true"}}exit 1{{end}}'
    cmds:
      # This fixes an "ERROR: Multiple platforms feature is currently not supported for docker driver" pipeline error
      # Only create our multiplatform builder if it doesn't already exist; otherwise list information about the one that exists
      - docker buildx inspect multiplatform || docker buildx create --name multiplatform --driver docker-container --use

  sbom:
    desc: Generate project SBOMs
    preconditions:
      - sh: which syft
        msg: "Syft must be installed and reasonably current"
    vars:
      PLATFORM: '{{if eq .PLATFORM "all"}}{{.SUPPORTED_PLATFORMS}}{{else if .PLATFORM}}{{.PLATFORM}}{{else}}{{.LOCAL_PLATFORM}}{{end}}'
      # This duplicates some build logic; consider centralizing
      TAG_COMMIT_HASH:
        sh: git rev-list -1 "v{{.VERSION}}"
      COMMIT_HASH:
        sh: git rev-parse HEAD
      COMMIT_HASH_SHORT:
        sh: git rev-parse --short HEAD
      REPO_TAGS:
        sh: git tag -l
      BUILD_VERSION:
        sh: |
          pipenv run python -c '
          version_string = "v{{.VERSION}}"
          repo_tags = []
          {{range $tag := .REPO_TAGS | splitLines -}}
          repo_tags.append("{{$tag}}")
          {{end}}
          if (
              version_string in repo_tags
              and "{{.TAG_COMMIT_HASH}}" == "{{.COMMIT_HASH}}"
          ):
              build_version = "{{.VERSION}}"
          else:
              build_version = f"{{.VERSION}}-{{.COMMIT_HASH_SHORT}}"
          print(build_version)'
      IMAGE_AND_TAG: '{{.IMAGE_AND_TAG_BASE}}-{{.BUILD_VERSION}}'
      SANITIZED_IMAGE_AND_TAG: '{{.IMAGE_AND_TAG | replace "/" "_" | replace ":" "_" | replace "-" "_"}}'
    cmds:
      - for:
          var: PLATFORM
          split: ','
          as: platform
        task: build
        vars:
          PLATFORM: '{{.platform}}'
          # This is necessary in order to have a separate tag per platform, and ensure there is only one manifest in the image index due to current
          # syft/stereoscope limitations
          DOCKER_BUILDX_CUSTOM_TAGS: '--tag {{.IMAGE_AND_TAG}}-{{.platform | replace "/" "_"}}'
          DOCKER_BUILDX_CUSTOM_ARGS: '{{.DOCKER_BUILDX_CUSTOM_ARGS | default ""}}'
          DOCKER_BUILDX_CUSTOM_CONTEXT: '{{.DOCKER_BUILDX_CUSTOM_CONTEXT}}'
      - for:
          var: PLATFORM
          split: ','
          as: platform
        cmd: |
          # Use double quotes so the SANITIZED_IMAGE_AND_TAG can be dynamic, like $(echo example)
          export base_name="{{.SANITIZED_IMAGE_AND_TAG}}_{{.platform | replace "/" "_"}}" \
          && export syft_command="{{if ne .platform .LOCAL_PLATFORM}}oci-archive:${base_name}.tar{{else}}docker:{{.IMAGE_AND_TAG}}-{{.platform | replace "/" "_"}}{{end}}" \
          && syft "${syft_command}" {{if eq .PLATFORM .LOCAL_PLATFORM}}--platform {{.platform}}{{end}} \
               -o json=sbom.${base_name}.syft.json \
               -o spdx-json=sbom.${base_name}.spdx.json \
               -o cyclonedx-json=sbom.${base_name}.cyclonedx.json


  vulnscan:
    desc: Vuln scan the SBOM
    vars:
      PLATFORM: '{{if eq .PLATFORM "all"}}{{.SUPPORTED_PLATFORMS}}{{else if .PLATFORM}}{{.PLATFORM}}{{else}}{{.LOCAL_PLATFORM}}{{end}}'
      # This duplicates some build logic; consider centralizing
      TAG_COMMIT_HASH:
        sh: git rev-list -1 "v{{.VERSION}}"
      COMMIT_HASH:
        sh: git rev-parse HEAD
      COMMIT_HASH_SHORT:
        sh: git rev-parse --short HEAD
      REPO_TAGS:
        sh: git tag -l
      BUILD_VERSION:
        sh: |
          pipenv run python -c '
          version_string = "v{{.VERSION}}"
          repo_tags = []
          {{range $tag := .REPO_TAGS | splitLines -}}
          repo_tags.append("{{$tag}}")
          {{end}}
          if (
              version_string in repo_tags
              and "{{.TAG_COMMIT_HASH}}" == "{{.COMMIT_HASH}}"
          ):
              build_version = "{{.VERSION}}"
          else:
              build_version = f"{{.VERSION}}-{{.COMMIT_HASH_SHORT}}"
          print(build_version)'
      IMAGE_AND_TAG: '{{.IMAGE_AND_TAG_BASE}}-{{.BUILD_VERSION}}'
      SANITIZED_IMAGE_AND_TAG: '{{.IMAGE_AND_TAG | replace "/" "_" | replace ":" "_" | replace "-" "_"}}'
    preconditions:
      - sh: which grype
        msg: "Grype must be installed and reasonably current"
    cmds:
      - for:
          var: PLATFORM
          split: ','
          as: platform
        cmd: |
          # Use double quotes so the SANITIZED_IMAGE_AND_TAG can be dynamic, like $(echo example)
          export base_name="{{.SANITIZED_IMAGE_AND_TAG}}_{{.platform | replace "/" "_"}}" \
          && grype "sbom:sbom.${base_name}.syft.json" \
            --output json \
            --file "vulns.${base_name}.json"
